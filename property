[display]
- Block : 길막 , 면
    따로 width를 선언하지 않은 경우, width = 부모의 content-box의 100%
    따로 width를 선언한 경우, 남은 공간은 margin으로 자동으로 채운다.

    따로 부모의 height를 선언하지 않은 경우, 자식요소의 height의 합 = 부모의 height

    width, height, padding, border, margin 다 쓸 수 있다.

- Inline : 흐름, 선
    흐름을 방해 하는 width, height, padding-top, padding-bottom, border-top, border-bottom,
    margin-top, margin-bottom 사용 불가

- Inline-block : inline 장점 + block 장점

[float]
어떤 display 요소이던지 float시키면 Block 요소가 된다.
그런데 길막을 제대로 하지 못하는 Block이 된다...
부모의 width를 100% 가지는 것이 아니라 자신의 content 너비만큼만 차지한다.

Block 박스들은 float를 없는 취급하지만, Inline 박스들은 기가막히게 알아챈다.

자식요소가 다 float되면 부모요소는 자식이 다 집을 나갔다고 생각하고 height가 0이된다.
그런데,
1. 부모 요소에 overflow: hidden 을 주면 float된 자식들을 영역으로 생각한다.
2. 부모 요소의 마지막에 css로 가상요소를 만들고 clear property를 쓴다.
    clear는 block 요소에만 적용 가능
    가상 요소는 요소 당 두 개를 줄 수 있다. ::before, ::after
   .parent::after{
        content:"";
        display: block;
        clear: left;
   }

[position]
- relative
    붕뜨긴 하지만 부모 요소가 있던 자리를 기억하면서 레이아웃이 망가지지 않는다.
- absolute
    요소가 float 한 것처럼 길막 못하는 block으로 바뀐다.
    다만, 주변의 inline 요소들이 피하지 않고 무시한다.
    부모요소를 거슬러 올라가면서 position이 static이면 무시하고, relative, absolute, fixed, sticky이면
    기준으로 삼는다.
-fixed
    기준이 viewport
    width을 따로 주지 않으면 content만큼 줄어든다.

[flexbox]
1. 정렬 하고자 하는 요소들의 부모 요소한테 display: flex / inline-flex 선언
2. 가로 / 세로 정렬 결정 flex-direction: row / column
    flex를 사용하면 눈에 안보이는 두 개의 Axis(축)이 생긴다.
    어떻게 정렬을 결정했느냐에 따라서 Axis가 달라진다.
    flex 방향에 따라 Main axis가 생기고 이와 수직인 Cross axis가 생긴다.
3. 무조건 한 줄 안에 다 정렬 할건지 결정
    flex-wrap: nowrap; 감싸지 않고 사이즈를 줄여서라도 한 줄에 정렬
    flex-wrap: wrap; 사이즈 유지하면서 공간이 모자르면 다음 줄에 정렬
4. Main axis에 따라 정렬하고 싶으면 justify-content property 사용
   Closs axis에 따라 정렬하고 싶으면 align-items, align-content 사용
5. flex-wrap: wrap; 하면 axis 흐름이 한개가 아니라 늘어난다.
    그래서 정렬이 이상해 보일 수 있음. 이때는 align-content property를 사용하면 전체 흐름의 axis를 기준으로 정렬할 수 있다.

[typography]
- text-indent
    들여쓰기, 내어쓰기
- text-transform
    none, capitalize(단어 첫문자는 대문자), uppercase, lowercase
- text-decoration
    none, underline, line-through, overline
- font-style
    normal, italic

1. 가지고 있는 폰트 제공하기
@font-face {
    font-family: "내가 부르기로 한 폰트명";
    font-style: normal;
    font-weight: 400;
    src: url("./assets/font/폰트명.eot");
}
css 파일에 @import url("./fonts.css");

[background]
- background-img: url("");
- background-repeat: no-repeat;
- background-size
    contain, cover, 100% auto (가로 세로)
- background-position: center center (x축 y축)

[transition]
value 1. property 선언
value 2. duration 선언
value 3. (option) timing-function
    - ease-in 천천히 휙 , ease-out 휙 천천히 , ease-in-out, cubic-bezier()
value 4. (option) delay

[animation]
1. 로직을 작성한다.

@keyframes 로직명 {
    from{

    }

    to{

    }
}

@keyframes 로직명 {
    0% {

    }

    50% {

    }

    100%{

    }
}

2. 애니메이션을 적용한다.
.box{
    animation-name: 로직명;
    animation-duration: 2000ms;
    animation-timing-function: ease-in-out;
    animation-delay: 1000ms;
    animation-iteration-count: infinite;
    animation-direction: alternate; // 로직 방향을 번갈아 가면서 진행
}

[box-shadow]
value 1. h-offset // x 축 그림자 이동
value 2. v-offset // y 축 그림자 이동
value 3. blur // 흐린 정도
value 4. spread // 그림자 사이즈
value 5. color // 색상
// neumorphis.io 에서 내 느낌대로 정하면 코드 생성


